Actividad 3.3 - A01732251

Practicando los lenguajes libres de contexto

Instrucciones: Escribe la notación BNF y EBNF para la gramática necesaria para definir modulos y funciones en Elixir.

***********************************************    BNF:    ***************************************************

-------------  Module: 

<module_function_expression> ::= <module_definition> <function_call> <nameless_function> <function_capture>
<module_definition> ::= defmodule <variable_alias> do <module_body> end
<module_body> ::= <expression_list><module_body> <module_specific_expr><module_body> <expression_list> <module_specific_expr>
<module_specific_expr> ::= <named_function_def> | @<attribute_name> <attribute_expression>
<attribute_name> ::= <identifier_name>
<attribute_expression> ::= <list> | <grouped_values> | <integer>| <bitstrings>| <variable_name>
<named_function_def> ::= <def_token> <function_head> <do_block>
<def_token> ::= def | defp
<do_block> ::=  do <expression_list> end | , do: <expression> | , do: (<expression_list>)
<function_head> ::= <function_name> | <function_name>(<parameter_list>) | <function_name>(<parameter_list>)
<parameter_list> ::= <parameter> | <parameter>, <parameter_list>
<parameter> ::= <parameter_name> | <parameter_name> \\ <expression>
<parameter_name> ::= <identifier_name>

-------------  Function

<variable> ::== <letter><variable> | _<variable> | <letter> | <letter><number> | <mult_var><number>
<operation> ::== <operator><number> | <operator><real>
<letter> ::== a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
<digit> ::== 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0
<number> ::== <digit> | <digit><number>
<arg_list> ::= <arg>, <arg_list> | <arg>
<arg> ::= <expression>
<function_call> ::= <variable_alias>.<qualified_function_name><arg_term> | <function_name><arg_term> | <nameless_function_call>
<arg_term> ::= (<arg_list>) | () | <arg_list>
<qualified_function_name> ::= <function_name> | <qualified_function_string>
<qualified_function_string>::="<qualified_function_string_list>"
<qualified_function_string_list> ::= <string_term_vanilla> | <string_term_vanilla><qualified_function_string_list>
<function_name> ::= <identifier_name>
<nameless_function> ::= fn <parameter_list> -> <expression_list> end
<function_capture> ::= &<variable_alias>.<qualified_function_name>/<integer> | &<function_name>/<integer>
<nameless_function_call> ::= <function_name>.(<arg_list>) | <nameless_function>.(<arg_list>) | (<function_capture>).(<arg_list>)

***********************************************    EBNF:    *************************************************** 
-------------  Module

MODULE ::= “defmodule” <MULTV> <module-name> <MULTV> “do” { <function> + } “end”;
MULTV-VARIABLE ::== MULTV[{VARIABLE}]
MULTV ::== 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' ... / | '1' | '2' | '3' | '4' | '5' | '6' ...

-------------  Function 

FUNCTION ::== (“def” | “defp”) <function-name> { <parameter> * } do { <expression> +} end 
            | (“def” | “defp”) <var-expression>, do <function-name> end
LETTER ::== 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'  ...
DIGIT ::== '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0'
        

